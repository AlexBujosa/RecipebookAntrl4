//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\kirot\source\repos\AnlrArbol\AnlrArbol\recipebook.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class recipebookParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, LINE_START=9, 
		GUION=10, REC_LBL=11, POR_LBL=12, TMP_LBL=13, TMC_LBL=14, CAL_LBL=15, 
		ING_LBL=16, ELA_LBL=17, LIST_ORDER_SEP=18, COM=19, SEP=20, TAB=21, WS=22, 
		NL=23, TEXT=24, WORD=25, NUMBER=26, FLOAT=27, INTEGER=28, CARRRET=29;
	public const int
		RULE_recipebook = 0, RULE_book = 1, RULE_entry = 2, RULE_recipe_tag = 3, 
		RULE_recipe_name = 4, RULE_portions_tag = 5, RULE_portion_unit = 6, RULE_prep_time_tag = 7, 
		RULE_cooking_time_tag = 8, RULE_calories_tag = 9, RULE_calories_content = 10, 
		RULE_calorie_unit = 11, RULE_ingredients_tag = 12, RULE_ingredient_list = 13, 
		RULE_ingredient_list_item = 14, RULE_ingredient_name = 15, RULE_elaboration_tag = 16, 
		RULE_elaboration_list = 17, RULE_elaboration_list_item = 18, RULE_list_order = 19, 
		RULE_order = 20, RULE_instruction = 21, RULE_time = 22, RULE_time_unit = 23, 
		RULE_amount = 24;
	public static readonly string[] ruleNames = {
		"recipebook", "book", "entry", "recipe_tag", "recipe_name", "portions_tag", 
		"portion_unit", "prep_time_tag", "cooking_time_tag", "calories_tag", "calories_content", 
		"calorie_unit", "ingredients_tag", "ingredient_list", "ingredient_list_item", 
		"ingredient_name", "elaboration_tag", "elaboration_list", "elaboration_list_item", 
		"list_order", "order", "instruction", "time", "time_unit", "amount"
	};

	private static readonly string[] _LiteralNames = {
		null, "'min'", "'minute'", "'sec'", "'second'", "'hr'", "'hour'", "'day'", 
		"'s'", null, "'-'", "'RECETA'", "'PORCIONES'", "'TIEMPO PREPARACION'", 
		"'TIEMPO COCCION'", "'CALORIAS'", "'INGREDIENTES'", "'ELABORACION'", "')'", 
		"','", "':'", "'\t'", null, "'\n'", null, null, null, null, null, "'\r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "LINE_START", "GUION", 
		"REC_LBL", "POR_LBL", "TMP_LBL", "TMC_LBL", "CAL_LBL", "ING_LBL", "ELA_LBL", 
		"LIST_ORDER_SEP", "COM", "SEP", "TAB", "WS", "NL", "TEXT", "WORD", "NUMBER", 
		"FLOAT", "INTEGER", "CARRRET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "recipebook.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static recipebookParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public recipebookParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public recipebookParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RecipebookContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BookContext book() {
			return GetRuleContext<BookContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(recipebookParser.Eof, 0); }
		public RecipebookContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recipebook; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecipebook(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecipebookContext recipebook() {
		RecipebookContext _localctx = new RecipebookContext(Context, State);
		EnterRule(_localctx, 0, RULE_recipebook);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			book();
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BookContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext[] entry() {
			return GetRuleContexts<EntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext entry(int i) {
			return GetRuleContext<EntryContext>(i);
		}
		public BookContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_book; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBook(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BookContext book() {
		BookContext _localctx = new BookContext(Context, State);
		EnterRule(_localctx, 2, RULE_book);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 53;
				entry();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LINE_START );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Recipe_tagContext recipe_tag() {
			return GetRuleContext<Recipe_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Portions_tagContext portions_tag() {
			return GetRuleContext<Portions_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Calories_tagContext calories_tag() {
			return GetRuleContext<Calories_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ingredients_tagContext ingredients_tag() {
			return GetRuleContext<Ingredients_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elaboration_tagContext elaboration_tag() {
			return GetRuleContext<Elaboration_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prep_time_tagContext prep_time_tag() {
			return GetRuleContext<Prep_time_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cooking_time_tagContext cooking_time_tag() {
			return GetRuleContext<Cooking_time_tagContext>(0);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 4, RULE_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			recipe_tag();
			State = 59;
			portions_tag();
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 60;
				prep_time_tag();
				}
				break;
			}
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 63;
				cooking_time_tag();
				}
				break;
			}
			State = 66;
			calories_tag();
			State = 67;
			ingredients_tag();
			State = 68;
			elaboration_tag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recipe_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_START() { return GetToken(recipebookParser.LINE_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REC_LBL() { return GetToken(recipebookParser.REC_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recipebookParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Recipe_nameContext recipe_name() {
			return GetRuleContext<Recipe_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(recipebookParser.NL, 0); }
		public Recipe_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recipe_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecipe_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recipe_tagContext recipe_tag() {
		Recipe_tagContext _localctx = new Recipe_tagContext(Context, State);
		EnterRule(_localctx, 6, RULE_recipe_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(LINE_START);
			State = 71;
			Match(REC_LBL);
			State = 72;
			Match(SEP);
			State = 73;
			Match(WS);
			State = 74;
			recipe_name();
			State = 75;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recipe_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recipebookParser.TEXT, 0); }
		public Recipe_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recipe_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecipe_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recipe_nameContext recipe_name() {
		Recipe_nameContext _localctx = new Recipe_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_recipe_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Portions_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_START() { return GetToken(recipebookParser.LINE_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POR_LBL() { return GetToken(recipebookParser.POR_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recipebookParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(recipebookParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(recipebookParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmountContext amount() {
			return GetRuleContext<AmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Portion_unitContext portion_unit() {
			return GetRuleContext<Portion_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(recipebookParser.NL, 0); }
		public Portions_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_portions_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPortions_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Portions_tagContext portions_tag() {
		Portions_tagContext _localctx = new Portions_tagContext(Context, State);
		EnterRule(_localctx, 10, RULE_portions_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(LINE_START);
			State = 80;
			Match(POR_LBL);
			State = 81;
			Match(SEP);
			State = 82;
			Match(WS);
			State = 83;
			amount();
			State = 84;
			Match(WS);
			State = 85;
			portion_unit();
			State = 86;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Portion_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recipebookParser.TEXT, 0); }
		public Portion_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_portion_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPortion_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Portion_unitContext portion_unit() {
		Portion_unitContext _localctx = new Portion_unitContext(Context, State);
		EnterRule(_localctx, 12, RULE_portion_unit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prep_time_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_START() { return GetToken(recipebookParser.LINE_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMP_LBL() { return GetToken(recipebookParser.TMP_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recipebookParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(recipebookParser.NL, 0); }
		public Prep_time_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prep_time_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrep_time_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prep_time_tagContext prep_time_tag() {
		Prep_time_tagContext _localctx = new Prep_time_tagContext(Context, State);
		EnterRule(_localctx, 14, RULE_prep_time_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(LINE_START);
			State = 91;
			Match(TMP_LBL);
			State = 92;
			Match(SEP);
			State = 93;
			Match(WS);
			State = 94;
			time();
			State = 95;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cooking_time_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_START() { return GetToken(recipebookParser.LINE_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMC_LBL() { return GetToken(recipebookParser.TMC_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recipebookParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(recipebookParser.NL, 0); }
		public Cooking_time_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cooking_time_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCooking_time_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cooking_time_tagContext cooking_time_tag() {
		Cooking_time_tagContext _localctx = new Cooking_time_tagContext(Context, State);
		EnterRule(_localctx, 16, RULE_cooking_time_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(LINE_START);
			State = 98;
			Match(TMC_LBL);
			State = 99;
			Match(SEP);
			State = 100;
			Match(WS);
			State = 101;
			time();
			State = 102;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Calories_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_START() { return GetToken(recipebookParser.LINE_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL_LBL() { return GetToken(recipebookParser.CAL_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recipebookParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Calories_contentContext calories_content() {
			return GetRuleContext<Calories_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(recipebookParser.NL, 0); }
		public Calories_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calories_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalories_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Calories_tagContext calories_tag() {
		Calories_tagContext _localctx = new Calories_tagContext(Context, State);
		EnterRule(_localctx, 18, RULE_calories_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(LINE_START);
			State = 105;
			Match(CAL_LBL);
			State = 106;
			Match(SEP);
			State = 107;
			Match(WS);
			State = 108;
			calories_content();
			State = 109;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Calories_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmountContext amount() {
			return GetRuleContext<AmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Calorie_unitContext calorie_unit() {
			return GetRuleContext<Calorie_unitContext>(0);
		}
		public Calories_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calories_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalories_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Calories_contentContext calories_content() {
		Calories_contentContext _localctx = new Calories_contentContext(Context, State);
		EnterRule(_localctx, 20, RULE_calories_content);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			amount();
			State = 112;
			Match(WS);
			State = 113;
			calorie_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Calorie_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recipebookParser.TEXT, 0); }
		public Calorie_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calorie_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalorie_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Calorie_unitContext calorie_unit() {
		Calorie_unitContext _localctx = new Calorie_unitContext(Context, State);
		EnterRule(_localctx, 22, RULE_calorie_unit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ingredients_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_START() { return GetToken(recipebookParser.LINE_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ING_LBL() { return GetToken(recipebookParser.ING_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recipebookParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(recipebookParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(recipebookParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ingredient_listContext ingredient_list() {
			return GetRuleContext<Ingredient_listContext>(0);
		}
		public Ingredients_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredients_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngredients_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ingredients_tagContext ingredients_tag() {
		Ingredients_tagContext _localctx = new Ingredients_tagContext(Context, State);
		EnterRule(_localctx, 24, RULE_ingredients_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(LINE_START);
			State = 118;
			Match(ING_LBL);
			State = 119;
			Match(SEP);
			State = 120;
			Match(NL);
			State = 121;
			ingredient_list();
			State = 122;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ingredient_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ingredient_list_itemContext[] ingredient_list_item() {
			return GetRuleContexts<Ingredient_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ingredient_list_itemContext ingredient_list_item(int i) {
			return GetRuleContext<Ingredient_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COM() { return GetTokens(recipebookParser.COM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COM(int i) {
			return GetToken(recipebookParser.COM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(recipebookParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(recipebookParser.NL, i);
		}
		public Ingredient_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredient_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngredient_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ingredient_listContext ingredient_list() {
		Ingredient_listContext _localctx = new Ingredient_listContext(Context, State);
		EnterRule(_localctx, 26, RULE_ingredient_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ingredient_list_item();
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COM) {
				{
				{
				State = 125;
				Match(COM);
				State = 126;
				Match(NL);
				State = 127;
				ingredient_list_item();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ingredient_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(recipebookParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AmountContext amount() {
			return GetRuleContext<AmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ingredient_nameContext ingredient_name() {
			return GetRuleContext<Ingredient_nameContext>(0);
		}
		public Ingredient_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredient_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngredient_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ingredient_list_itemContext ingredient_list_item() {
		Ingredient_list_itemContext _localctx = new Ingredient_list_itemContext(Context, State);
		EnterRule(_localctx, 28, RULE_ingredient_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(TAB);
			State = 134;
			amount();
			State = 135;
			Match(WS);
			State = 136;
			ingredient_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ingredient_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recipebookParser.TEXT, 0); }
		public Ingredient_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredient_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngredient_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ingredient_nameContext ingredient_name() {
		Ingredient_nameContext _localctx = new Ingredient_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_ingredient_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elaboration_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_START() { return GetToken(recipebookParser.LINE_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELA_LBL() { return GetToken(recipebookParser.ELA_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recipebookParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(recipebookParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(recipebookParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elaboration_listContext elaboration_list() {
			return GetRuleContext<Elaboration_listContext>(0);
		}
		public Elaboration_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboration_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboration_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elaboration_tagContext elaboration_tag() {
		Elaboration_tagContext _localctx = new Elaboration_tagContext(Context, State);
		EnterRule(_localctx, 32, RULE_elaboration_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(LINE_START);
			State = 141;
			Match(ELA_LBL);
			State = 142;
			Match(SEP);
			State = 143;
			Match(NL);
			State = 144;
			elaboration_list();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 145;
				Match(NL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elaboration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Elaboration_list_itemContext[] elaboration_list_item() {
			return GetRuleContexts<Elaboration_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elaboration_list_itemContext elaboration_list_item(int i) {
			return GetRuleContext<Elaboration_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(recipebookParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(recipebookParser.NL, i);
		}
		public Elaboration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboration_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elaboration_listContext elaboration_list() {
		Elaboration_listContext _localctx = new Elaboration_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_elaboration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			elaboration_list_item();
			State = 153;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 149;
					Match(NL);
					State = 150;
					elaboration_list_item();
					}
					} 
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elaboration_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(recipebookParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_orderContext list_order() {
			return GetRuleContext<List_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public Elaboration_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboration_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboration_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elaboration_list_itemContext elaboration_list_item() {
		Elaboration_list_itemContext _localctx = new Elaboration_list_itemContext(Context, State);
		EnterRule(_localctx, 36, RULE_elaboration_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(TAB);
			State = 157;
			list_order();
			State = 158;
			Match(WS);
			State = 159;
			instruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_orderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_ORDER_SEP() { return GetToken(recipebookParser.LIST_ORDER_SEP, 0); }
		public List_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_orderContext list_order() {
		List_orderContext _localctx = new List_orderContext(Context, State);
		EnterRule(_localctx, 38, RULE_list_order);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			order();
			State = 162;
			Match(LIST_ORDER_SEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(recipebookParser.NUMBER, 0); }
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 40, RULE_order);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recipebookParser.TEXT, 0); }
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 42, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmountContext amount() {
			return GetRuleContext<AmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(recipebookParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Time_unitContext time_unit() {
			return GetRuleContext<Time_unitContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(Context, State);
		EnterRule(_localctx, 44, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			amount();
			State = 169;
			Match(WS);
			State = 170;
			time_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_unitContext : ParserRuleContext {
		public Time_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_unitContext time_unit() {
		Time_unitContext _localctx = new Time_unitContext(Context, State);
		EnterRule(_localctx, 46, RULE_time_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 173;
				Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(recipebookParser.NUMBER, 0); }
		public AmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecipebookVisitor<TResult> typedVisitor = visitor as IrecipebookVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountContext amount() {
		AmountContext _localctx = new AmountContext(Context, State);
		EnterRule(_localctx, 48, RULE_amount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\xB5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x6', '\x3', '\x39', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', ':', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '@', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x43', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x83', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x86', '\v', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x95', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\x9A', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x9D', '\v', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xB1', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x2', '\x2', '\x1B', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x2', '\x3', '\x3', '\x2', '\x3', '\t', '\x2', 
		'\xA2', '\x2', '\x34', '\x3', '\x2', '\x2', '\x2', '\x4', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'O', '\x3', '\x2', '\x2', '\x2', '\f', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\xE', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\\', '\x3', '\x2', '\x2', '\x2', '\x12', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'j', '\x3', '\x2', '\x2', '\x2', '\x16', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x18', 'u', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x1C', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x87', '\x3', '\x2', '\x2', '\x2', ' ', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x8E', '\x3', '\x2', '\x2', '\x2', '$', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x9E', '\x3', '\x2', '\x2', '\x2', '(', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xA6', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '.', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x32', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\x4', '\x3', '\x2', '\x35', 
		'\x36', '\a', '\x2', '\x2', '\x3', '\x36', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\x5', '\x6', '\x4', '\x2', '\x38', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', '\b', '\x5', '\x2', 
		'=', '?', '\x5', '\f', '\a', '\x2', '>', '@', '\x5', '\x10', '\t', '\x2', 
		'?', '>', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x42', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x5', '\x12', 
		'\n', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\x14', '\v', '\x2', '\x45', '\x46', '\x5', '\x1A', 
		'\xE', '\x2', '\x46', 'G', '\x5', '\"', '\x12', '\x2', 'G', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\a', '\v', '\x2', '\x2', 'I', 'J', '\a', 
		'\r', '\x2', '\x2', 'J', 'K', '\a', '\x16', '\x2', '\x2', 'K', 'L', '\a', 
		'\x18', '\x2', '\x2', 'L', 'M', '\x5', '\n', '\x6', '\x2', 'M', 'N', '\a', 
		'\x19', '\x2', '\x2', 'N', '\t', '\x3', '\x2', '\x2', '\x2', 'O', 'P', 
		'\a', '\x1A', '\x2', '\x2', 'P', '\v', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\a', '\v', '\x2', '\x2', 'R', 'S', '\a', '\xE', '\x2', '\x2', 'S', 
		'T', '\a', '\x16', '\x2', '\x2', 'T', 'U', '\a', '\x18', '\x2', '\x2', 
		'U', 'V', '\x5', '\x32', '\x1A', '\x2', 'V', 'W', '\a', '\x18', '\x2', 
		'\x2', 'W', 'X', '\x5', '\xE', '\b', '\x2', 'X', 'Y', '\a', '\x19', '\x2', 
		'\x2', 'Y', '\r', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x1A', 
		'\x2', '\x2', '[', '\xF', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', 
		'\v', '\x2', '\x2', ']', '^', '\a', '\xF', '\x2', '\x2', '^', '_', '\a', 
		'\x16', '\x2', '\x2', '_', '`', '\a', '\x18', '\x2', '\x2', '`', '\x61', 
		'\x5', '.', '\x18', '\x2', '\x61', '\x62', '\a', '\x19', '\x2', '\x2', 
		'\x62', '\x11', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\v', 
		'\x2', '\x2', '\x64', '\x65', '\a', '\x10', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x16', '\x2', '\x2', '\x66', 'g', '\a', '\x18', '\x2', '\x2', 'g', 
		'h', '\x5', '.', '\x18', '\x2', 'h', 'i', '\a', '\x19', '\x2', '\x2', 
		'i', '\x13', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\v', '\x2', 
		'\x2', 'k', 'l', '\a', '\x11', '\x2', '\x2', 'l', 'm', '\a', '\x16', '\x2', 
		'\x2', 'm', 'n', '\a', '\x18', '\x2', '\x2', 'n', 'o', '\x5', '\x16', 
		'\f', '\x2', 'o', 'p', '\a', '\x19', '\x2', '\x2', 'p', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x5', '\x32', '\x1A', '\x2', 'r', 's', 
		'\a', '\x18', '\x2', '\x2', 's', 't', '\x5', '\x18', '\r', '\x2', 't', 
		'\x17', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x1A', '\x2', '\x2', 
		'v', '\x19', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\v', '\x2', 
		'\x2', 'x', 'y', '\a', '\x12', '\x2', '\x2', 'y', 'z', '\a', '\x16', '\x2', 
		'\x2', 'z', '{', '\a', '\x19', '\x2', '\x2', '{', '|', '\x5', '\x1C', 
		'\xF', '\x2', '|', '}', '\a', '\x19', '\x2', '\x2', '}', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x84', '\x5', '\x1E', '\x10', '\x2', '\x7F', 
		'\x80', '\a', '\x15', '\x2', '\x2', '\x80', '\x81', '\a', '\x19', '\x2', 
		'\x2', '\x81', '\x83', '\x5', '\x1E', '\x10', '\x2', '\x82', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x17', '\x2', '\x2', '\x88', 
		'\x89', '\x5', '\x32', '\x1A', '\x2', '\x89', '\x8A', '\a', '\x18', '\x2', 
		'\x2', '\x8A', '\x8B', '\x5', ' ', '\x11', '\x2', '\x8B', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x1A', '\x2', '\x2', '\x8D', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\v', '\x2', '\x2', 
		'\x8F', '\x90', '\a', '\x13', '\x2', '\x2', '\x90', '\x91', '\a', '\x16', 
		'\x2', '\x2', '\x91', '\x92', '\a', '\x19', '\x2', '\x2', '\x92', '\x94', 
		'\x5', '$', '\x13', '\x2', '\x93', '\x95', '\a', '\x19', '\x2', '\x2', 
		'\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '#', '\x3', '\x2', '\x2', '\x2', '\x96', '\x9B', 
		'\x5', '&', '\x14', '\x2', '\x97', '\x98', '\a', '\x19', '\x2', '\x2', 
		'\x98', '\x9A', '\x5', '&', '\x14', '\x2', '\x99', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '%', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\a', '\x17', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', '(', '\x15', '\x2', '\xA0', '\xA1', '\a', '\x18', '\x2', '\x2', 
		'\xA1', '\xA2', '\x5', ',', '\x17', '\x2', '\xA2', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\x5', '*', '\x16', '\x2', '\xA4', '\xA5', 
		'\a', '\x14', '\x2', '\x2', '\xA5', ')', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\a', '\x1C', '\x2', '\x2', '\xA7', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\x1A', '\x2', '\x2', '\xA9', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\x32', '\x1A', '\x2', '\xAB', 
		'\xAC', '\a', '\x18', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\x30', '\x19', 
		'\x2', '\xAD', '/', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\t', 
		'\x2', '\x2', '\x2', '\xAF', '\xB1', '\a', '\n', '\x2', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\x31', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		'\x1C', '\x2', '\x2', '\xB3', '\x33', '\x3', '\x2', '\x2', '\x2', '\t', 
		':', '?', '\x42', '\x84', '\x94', '\x9B', '\xB0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
